// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  username       String    @unique
  name           String?
  hashedPassword String
  listings       Listing[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Account        Account[]
  Session        Session[]
  image          String?
  Comment        Comment[]

  @@map("users")
}

model Listing {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  slug         String    @unique
  title        String
  body         String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @db.ObjectId
  comments     Comment[]
  make         String
  model        String
  variant      String
  year         String
  coupe_type   String
  number_doors String
  condition    String
  price        String
  fuel         String
  power        String
  transmission String
  mileage      String
  color        String
  photos       String[]
  description  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("listings")
}

model AddListing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  listingId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
